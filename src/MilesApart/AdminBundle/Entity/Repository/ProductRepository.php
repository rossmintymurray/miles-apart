<?php

namespace MilesApart\AdminBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use MilesApart\AdminBundle\ProductCategory;
/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
    //Check the products for array match. (For CSV import)
    public function findProductByBarcode($barcodeArray)
    {
        //Check if there is a value for product id.
        if ($barcodeArray) {
            $query = $this->getEntityManager()
                ->createQuery('
                    		SELECT p FROM MilesApartAdminBundle:Product p
                            LEFT JOIN p.product_supplier s
                            WHERE p.product_barcode = :barcodeArray	
                    		')
                ->setParameter('barcodeArray', $barcodeArray);

            return $query
                ->getResult();
        }
    }

    //Check the products for array match. (For CSV import)
    public function findProductByName($productName)
    {
        //Check if there is a value for product id.
        if ($productName) {
            $query = $this->getEntityManager()
                ->createQuery('
                            SELECT p FROM MilesApartAdminBundle:Product p
                            WHERE p.product_name = :productName       
                            ')
                ->setParameter('productName', $productName);
        }
        return $query
            ->getResult();
    }

    //Check the products for array match. (For CSV import)
    public function findBySupplierCode($productSupplierCode, $supplierId)
    {
        //Check if there is a value for product id.
        if ($productSupplierCode && $supplierId) {
            $query = $this->getEntityManager()
                ->createQuery('
                            SELECT p FROM MilesApartAdminBundle:Product p
                            JOIN p.product_supplier ps
                            JOIN ps.supplier s
                            WHERE p.product_supplier_code = :productSupplierCode
                            AND s.id = :supplierId 
                            ')
                ->setParameter('productSupplierCode', $productSupplierCode)
                ->setParameter('supplierId', $supplierId);
        }
        return $query
            ->getResult();
    }

    public function findProductsFromSupplierCodeText($productSupplierCode)
    {
        //Check if there is a value for product id.
        if ($productSupplierCode) {
            $query = $this->getEntityManager()
                ->createQuery('
                            SELECT p FROM MilesApartAdminBundle:Product p
                            WHERE p.product_supplier_code LIKE :productSupplierCode
                            ')
                ->setParameter('productSupplierCode', '%' . $productSupplierCode . '%');
        }
        return $query
            ->getResult();
    }


    public function findByLetters($string)
    {
        return $this->getEntityManager()
            ->createQuery('
            SELECT p FROM MilesApartAdminBundle:Product p  
                WHERE p.product_name  LIKE :string 
                OR p.product_marketing_name LIKE :string 
                OR p.product_marketing_sub_name LIKE :string 
                AND p.is_product_online = true

                ')
            ->setParameter('string', '%' . $string . '%')
            ->getResult();
    }

    public function publicSearch($string)
    {
        return $this->getEntityManager()
            ->createQuery('
            SELECT p, k FROM MilesApartAdminBundle:Product p  
            LEFT JOIN p.keyword k
                WHERE p.product_marketing_name LIKE :string 
                OR p.product_marketing_sub_name LIKE :string 
                OR k.keyword_word LIKE :string 
                AND p.is_product_online = true

                ')
            ->setParameter('string', '%' . $string . '%')
            ->getResult();
    }

    public function findProductsByCategory($category_slug)
    {
        return $this->getEntityManager()
            ->createQuery('
            SELECT p FROM MilesApartAdminBundle:Product p  
             JOIN p.category c 
                WHERE c.category_slug = :category_slug
                ')
            ->setParameter('category_slug', $category_slug)
            ->getResult();
    }

    public function findWebProductsByCategory($category_slug, $order_by = null)
    {
        $query = '
            SELECT p FROM MilesApartAdminBundle:Product p  
             JOIN p.category c 
             JOIN p.product_price pp
                WHERE c.category_slug = :category_slug
                AND p.is_product_online = true
                ';

        if ($order_by != null) {
            $query .= " ORDER BY " . $order_by;
        } else {
            $query .= " ORDER BY p.product_name ASC";
        }
        return $this->getEntityManager()
            ->createQuery($query)
            ->setParameter('category_slug', $category_slug)
            ->getResult();
    }

    public function findWebProductsByCategoryWithParams($category_slug, $params, $order_by = null)
    {


        //Build the query 
        $query = "SELECT p FROM MilesApartAdminBundle:Product p  
             JOIN p.category c 
             JOIN p.product_price pp
             JOIN p.attribute_value av WHERE";


        $index = 0;
        //Iterate over the params
        if (count($params) == 1) {
            $query .= " av.attribute_value_slug = :attribute_value_0 AND";
        } else if (count($params) > 1) {
            $query .= " (";
            foreach ($params as $value) {

                if ($index == 0) {
                    $query .= "av.attribute_value_slug = :attribute_value_" . $index;
                } else {
                    $query .= " OR av.attribute_value_slug = :attribute_value_" . $index;
                }
                $index++;
            }
            $query .= ") AND ";
        }

        $query .= " c.category_slug = :category_slug
                AND p.is_product_online = true";

        if ($order_by != null) {
            $query .= " ORDER BY " . $order_by;
        } else {
            $query .= " ORDER BY p.product_name ASC";
        }

        $full_query = $this->getEntityManager()->createQuery($query);
        $full_query->setParameter('category_slug', $category_slug);

        $i = 0;
        //Iterate over the params 
        foreach ($params as $value) {
            $full_query->setParameter('attribute_value_' . $i, $value);

            $i++;
        }


        return $full_query->getResult();
    }

    public function findWebProductsBySearchWithParams($string, $params, $order_by = null)
    {


        //Build the query 
        $query = "SELECT p FROM MilesApartAdminBundle:Product p  
             JOIN p.category c 
             JOIN p.product_price pp
             LEFT JOIN p.attribute_value av 
             LEFT JOIN p.keyword k
             WHERE";


        $index = 0;
        //Iterate over the params
        if (count($params) == 1) {
            $query .= " av.attribute_value_slug = :attribute_value_0 AND";
        } else if (count($params) > 1) {
            $query .= " (";
            foreach ($params as $value) {

                if ($index == 0) {
                    $query .= "av.attribute_value_slug = :attribute_value_" . $index;
                } else {
                    $query .= " OR av.attribute_value_slug = :attribute_value_" . $index;
                }
                $index++;
            }
            $query .= ") AND ";
        }

        //Set the category
        //$query .= " c.category_slug = :category_slug
        //AND p.is_product_online = true";

        //Search string
        $query .= " p.product_marketing_name LIKE :string 
                OR p.product_marketing_sub_name LIKE :string 
                OR k.keyword_word LIKE :string";

        //Set the online only
        //$query .= " AND p.is_product_online = true";

        //Set the order by
        if ($order_by != null) {
            $query .= " ORDER BY " . $order_by;
        } else {
            $query .= " ORDER BY p.product_name ASC";
        }


        $full_query = $this->getEntityManager()->createQuery($query);
        $full_query->setParameter('string', '%' . $string . '%');

        $i = 0;
        //Iterate over the params 
        foreach ($params as $value) {
            $full_query->setParameter('attribute_value_' . $i, $value);

            $i++;
        }


        return $full_query->getResult();
    }


    public function findProductsBySubCategory($sub_category_slug)
    {
        return $this->getEntityManager()
            ->createQuery('
            SELECT p FROM MilesApartAdminBundle:Product p  
             JOIN p.category c 
             JOIN c.parent pa
                WHERE pa.category_slug = :sub_category_slug
                ')
            ->setParameter('sub_category_slug', $sub_category_slug)
            ->getResult();
    }

    public function findProductsBySupplier($supplier_id)
    {
        return $this->getEntityManager()
            ->createQuery('
            SELECT p FROM MilesApartAdminBundle:Product p  
             JOIN p.product_supplier ps 
             JOIN ps.supplier s
                WHERE s.id = :supplier_id
                ')
            ->setParameter('supplier_id', $supplier_id)
            ->getResult();
    }

    public function findNewProducts()
    {
        return $this->getEntityManager()
            ->createQuery('
            SELECT p FROM MilesApartAdminBundle:Product p  
             JOIN p.product_price pp 
                WHERE p.is_product_online = true
                ORDER BY p.product_date_created DESC
                ')
            ->setMaxResults(4)
            ->getResult();
    }
}