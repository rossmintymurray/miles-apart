<?php

namespace MilesApart\AdminBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CustomerOrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomerOrderRepository extends EntityRepository
{
	
	//Check the products for array match. (For CSV import)
    public function findLatestAmazonOrder()
    {
       
	    $query = $this->getEntityManager()
	            ->createQuery('
	                SELECT co FROM MilesApartAdminBundle:CustomerOrder co
	                WHERE co.customer_order_source = :customerOrderSource
	                ORDER BY co.customer_order_date_created DESC     
	                ')
	            ->setParameter('customerOrderSource', 2)
	            ->setMaxResults(1);
        
	    return $query
	              ->getResult(); 
   }

   //Check the products for array match. (For CSV import)
    public function findInvoicesToPrint()
    {
       
	    $query = $this->getEntityManager()
	            ->createQuery('
	                SELECT co FROM MilesApartAdminBundle:CustomerOrder co
	                JOIN co.customer c
	                WHERE co.customer_order_state = :customerOrderState
	                AND c.vat_invoice_option = :vatInvoiceOption
	                ORDER BY co.customer_order_date_created DESC     
	                ')
	            ->setParameter('customerOrderState', 2)
	            ->setParameter('vatInvoiceOption', true);
        
	    return $query
	              ->getResult(); 
   }

   //Check the products for array match. (For CSV import)
    public function getMACustomerOrderByStartAndEndDate($start_date, $end_date)
    {
        //Get Daily Take Business Premises WHERE daily_take_date is between start date and end date.
        $qb = $this->getEntityManager()
                        ->createQueryBuilder();
                        $qb->select('co')
                        ->from('MilesApartAdminBundle:CustomerOrder', 'co')
                        ->where('co.customer_order_date_created BETWEEN :start_date AND :end_date AND co.customer_order_total_price_paid IS NOT NULL AND co.customer_order_source = 1')
                        ->setParameter('start_date', $start_date)
                        ->setParameter('end_date', $end_date);
        
        $query = $qb->getQuery();

        //Return result set.
        return $query
                  ->getResult(); 
   }

   //Check the products for array match. (For CSV import)
    public function getAmazonCustomerOrderByStartAndEndDate($start_date, $end_date)
    {
        //Get Daily Take Business Premises WHERE daily_take_date is between start date and end date.
        $qb = $this->getEntityManager()
                        ->createQueryBuilder();
                        $qb->select('co')
                        ->from('MilesApartAdminBundle:CustomerOrder', 'co')
                        ->where('co.customer_order_date_created BETWEEN :start_date AND :end_date AND co.customer_order_total_price_paid IS NOT NULL AND co.customer_order_source = 2')
                        ->setParameter('start_date', $start_date)
                        ->setParameter('end_date', $end_date);
        
        $query = $qb->getQuery();

        //Return result set.
        return $query
                  ->getResult(); 
   }

    //Check the products for array match. (For CSV import)
    public function getUnshippedCustomerOrders()
    {
        //Get Daily Take Business Premises WHERE daily_take_date is between start date and end date.
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('co')
            ->from('MilesApartAdminBundle:CustomerOrder', 'co')
            ->where('co.customer_order_total_price_paid IS NOT NULL AND co.customer_order_state < 6')
            ->orderBy('co.id', 'DESC');

        $query = $qb->getQuery();

        //Return result set.
        return $query->getResult();
    }

    //Check the products for array match. (For CSV import)
    public function getCurrentOrdersByCustomerId($customerId)
    {
       
      $query = $this->getEntityManager()
              ->createQuery('
                  SELECT co FROM MilesApartAdminBundle:CustomerOrder co
                  JOIN co.customer c
                  WHERE co.customer_order_state < :customerOrderState
                  AND c.id = :customerId
                  ORDER BY co.customer_order_date_created DESC     
                  ')
              ->setParameter('customerOrderState', 8)
              ->setParameter('customerId', $customerId)
              ->setMaxResults(5);
              
        
      return $query
                ->getResult(); 
   }

   //Check the products for array match. (For CSV import)
    public function getPreviousOrdersByCustomerId($customerId)
    {
       
      $query = $this->getEntityManager()
              ->createQuery('
                  SELECT co FROM MilesApartAdminBundle:CustomerOrder co
                  JOIN co.customer c
                  WHERE co.customer_order_state = :customerOrderState
                  AND c.id = :customerId
                  ORDER BY co.customer_order_date_created DESC     
                  ')
              ->setParameter('customerOrderState', 8)
              ->setParameter('customerId', $customerId)
              ->setMaxResults(5);
              
        
      return $query
                ->getResult(); 
   }

    //Find all amazon customer orders on a shipping manifest
    public function findAmazonOrdersOnManifest($manifest_batch_number)
    {
        //Check if there is a value for product id.

        $query = $this->getEntityManager()
            ->createQuery('
            		SELECT co FROM MilesApartAdminBundle:CustomerOrder co
                    JOIN co.ShippingManifest p
                    ORDER BY spp.staff_pick_product_date_created DESC
            		')
            ->setMaxResults(4);
        return $query
            ->getResult();
    }
}

